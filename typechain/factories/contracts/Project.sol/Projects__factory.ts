/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Projects,
  ProjectsInterface,
} from "../../../contracts/Project.sol/Projects";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectID",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_targetBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minTotalFunding",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxTotalFunding",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
    ],
    name: "createProject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectID",
        type: "uint256",
      },
    ],
    name: "fundProject",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_projectID",
        type: "uint256",
      },
    ],
    name: "getFunderAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectID",
        type: "uint256",
      },
    ],
    name: "getOwnFundingAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "projects",
    outputs: [
      {
        internalType: "uint256",
        name: "projectID",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "projectOwner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "targetBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minTotalFunding",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxTotalFunding",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalFunded",
        type: "uint256",
      },
      {
        internalType: "contract ERC20",
        name: "rewardToken",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_targetBlock",
        type: "uint256",
      },
    ],
    name: "updateFundingEnd",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611376806100206000396000f3fe6080604052600436106100705760003560e01c80636c563abe1161004e5780636c563abe1461011f5780638da5cb5b1461013b578063a37dad5014610166578063b213da701461018f57610070565b8063107046bd146100755780631f902bbf146100b9578063472a6804146100e2575b600080fd5b34801561008157600080fd5b5061009c6004803603810190610097919061093c565b6101cc565b6040516100b0989796959493929190610aa8565b60405180910390f35b3480156100c557600080fd5b506100e060048036038101906100db9190610c8e565b6102ec565b005b3480156100ee57600080fd5b5061010960048036038101906101049190610d37565b61045e565b6040516101169190610d77565b60405180910390f35b6101396004803603810190610134919061093c565b6105f2565b005b34801561014757600080fd5b506101506106d5565b60405161015d9190610d92565b60405180910390f35b34801561017257600080fd5b5061018d60048036038101906101889190610dad565b6106f9565b005b34801561019b57600080fd5b506101b660048036038101906101b1919061093c565b610806565b6040516101c39190610d77565b60405180910390f35b600181815481106101dc57600080fd5b906000526020600020906008020160009150905080600001549080600101805461020590610e1c565b80601f016020809104026020016040519081016040528092919081815260200182805461023190610e1c565b801561027e5780601f106102535761010080835404028352916020019161027e565b820191906000526020600020905b81548152906001019060200180831161026157829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905088565b60016040518061010001604052808881526020018781526020013373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001600081526020018373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000155602082015181600101908161039d9190610fef565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050505050565b6000816002600082815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc9061110d565b60405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000205411610598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058f90611179565b60405180910390fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205491505092915050565b60006002600083815260200190815260200160002090508060050154341061064f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610646906111e5565b60405180910390fd5b348160060160008282546106639190611234565b9250508190555034600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008282546106ca9190611234565b925050819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b816002600082815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461079e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107959061110d565b60405180910390fd5b4382116107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d7906112b4565b60405180910390fd5b600060026000858152602001908152602001600020905082816003018190555050505050565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020541161089a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089190611320565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020549050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61091981610906565b811461092457600080fd5b50565b60008135905061093681610910565b92915050565b600060208284031215610952576109516108fc565b5b600061096084828501610927565b91505092915050565b61097281610906565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109b2578082015181840152602081019050610997565b60008484015250505050565b6000601f19601f8301169050919050565b60006109da82610978565b6109e48185610983565b93506109f4818560208601610994565b6109fd816109be565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3382610a08565b9050919050565b610a4381610a28565b82525050565b6000819050919050565b6000610a6e610a69610a6484610a08565b610a49565b610a08565b9050919050565b6000610a8082610a53565b9050919050565b6000610a9282610a75565b9050919050565b610aa281610a87565b82525050565b600061010082019050610abe600083018b610969565b8181036020830152610ad0818a6109cf565b9050610adf6040830189610a3a565b610aec6060830188610969565b610af96080830187610969565b610b0660a0830186610969565b610b1360c0830185610969565b610b2060e0830184610a99565b9998505050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b6f826109be565b810181811067ffffffffffffffff82111715610b8e57610b8d610b37565b5b80604052505050565b6000610ba16108f2565b9050610bad8282610b66565b919050565b600067ffffffffffffffff821115610bcd57610bcc610b37565b5b610bd6826109be565b9050602081019050919050565b82818337600083830152505050565b6000610c05610c0084610bb2565b610b97565b905082815260208101848484011115610c2157610c20610b32565b5b610c2c848285610be3565b509392505050565b600082601f830112610c4957610c48610b2d565b5b8135610c59848260208601610bf2565b91505092915050565b610c6b81610a28565b8114610c7657600080fd5b50565b600081359050610c8881610c62565b92915050565b60008060008060008060c08789031215610cab57610caa6108fc565b5b6000610cb989828a01610927565b965050602087013567ffffffffffffffff811115610cda57610cd9610901565b5b610ce689828a01610c34565b9550506040610cf789828a01610927565b9450506060610d0889828a01610927565b9350506080610d1989828a01610927565b92505060a0610d2a89828a01610c79565b9150509295509295509295565b60008060408385031215610d4e57610d4d6108fc565b5b6000610d5c85828601610c79565b9250506020610d6d85828601610927565b9150509250929050565b6000602082019050610d8c6000830184610969565b92915050565b6000602082019050610da76000830184610a3a565b92915050565b60008060408385031215610dc457610dc36108fc565b5b6000610dd285828601610927565b9250506020610de385828601610927565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e3457607f821691505b602082108103610e4757610e46610ded565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610eaf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610e72565b610eb98683610e72565b95508019841693508086168417925050509392505050565b6000610eec610ee7610ee284610906565b610a49565b610906565b9050919050565b6000819050919050565b610f0683610ed1565b610f1a610f1282610ef3565b848454610e7f565b825550505050565b600090565b610f2f610f22565b610f3a818484610efd565b505050565b5b81811015610f5e57610f53600082610f27565b600181019050610f40565b5050565b601f821115610fa357610f7481610e4d565b610f7d84610e62565b81016020851015610f8c578190505b610fa0610f9885610e62565b830182610f3f565b50505b505050565b600082821c905092915050565b6000610fc660001984600802610fa8565b1980831691505092915050565b6000610fdf8383610fb5565b9150826002028217905092915050565b610ff882610978565b67ffffffffffffffff81111561101157611010610b37565b5b61101b8254610e1c565b611026828285610f62565b600060209050601f8311600181146110595760008415611047578287015190505b6110518582610fd3565b8655506110b9565b601f19841661106786610e4d565b60005b8281101561108f5784890151825560018201915060208501945060208101905061106a565b868310156110ac57848901516110a8601f891682610fb5565b8355505b6001600288020188555050505b505050505050565b7f4e6f74207468652070726f6a656374206f776e65720000000000000000000000600082015250565b60006110f7601583610983565b9150611102826110c1565b602082019050919050565b60006020820190508181036000830152611126816110ea565b9050919050565b7f46756e646572206e6f7420666f756e6400000000000000000000000000000000600082015250565b6000611163601083610983565b915061116e8261112d565b602082019050919050565b6000602082019050818103600083015261119281611156565b9050919050565b7f416d6f756e742065786365656473206d6178696d756d2066756e64696e670000600082015250565b60006111cf601e83610983565b91506111da82611199565b602082019050919050565b600060208201905081810360008301526111fe816111c2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061123f82610906565b915061124a83610906565b925082820190508082111561126257611261611205565b5b92915050565b7f54617267657420626c6f636b20697320696e2074686520706173740000000000600082015250565b600061129e601b83610983565b91506112a982611268565b602082019050919050565b600060208201905081810360008301526112cd81611291565b9050919050565b7f4e6f2066756e647320666f756e64000000000000000000000000000000000000600082015250565b600061130a600e83610983565b9150611315826112d4565b602082019050919050565b60006020820190508181036000830152611339816112fd565b905091905056fea264697066735822122039a7155648921a40a6e685059b077323360f69876da8d0688c151b27353b519364736f6c63430008110033";

type ProjectsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProjectsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Projects__factory extends ContractFactory {
  constructor(...args: ProjectsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Projects> {
    return super.deploy(overrides || {}) as Promise<Projects>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Projects {
    return super.attach(address) as Projects;
  }
  override connect(signer: Signer): Projects__factory {
    return super.connect(signer) as Projects__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProjectsInterface {
    return new utils.Interface(_abi) as ProjectsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Projects {
    return new Contract(address, _abi, signerOrProvider) as Projects;
  }
}
